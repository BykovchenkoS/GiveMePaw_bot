import telebot
import pymysql
import re
import update as update
from telebot import types
from config import host, user, password, db_name
from telegram.ext import CommandHandler, MessageHandler, Filters

# –ø—Ä–∏–≤—è–∑–∞–ª–∞ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∫ –ø—Ä–æ–µ–∫—Ç—É
connection = pymysql.connect(
    host=host,
    port=3306,
    user=user,
    password=password,
    database=db_name,
    cursorclass=pymysql.cursors.DictCursor
)

bot = telebot.TeleBot('5250939994:AAE3SyKrxgfxX4dlRWyJUeznzTyEzuOJyEE')

form_animal = '–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∞–Ω–∫–µ—Ç—É –≤–∞—à–µ–≥–æ –ø–æ–¥–æ–ø–µ—á–Ω–æ–≥–æ –ø–æ —Å–ª–µ–¥—É—é—â–µ–º—É –æ–±—Ä–∞–∑—Ü—É:' \
              '\n\n1. –í–∏–¥ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ, –∏–º—è –∏ –≤–æ–∑—Ä–∞—Å—Ç üêæ' \
              '\n2. –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –∏—Å—Ç–æ—Ä–∏—é –∂–∏–∑–Ω–∏üíî' \
              '\n3. –ï—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –ª–µ—á–µ–Ω–∏–µ, —Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –±–æ–ª–µ–∑–Ω–∏, –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö ' \
              '–ø—Ä–µ–ø–∞—Ä–∞—Ç–∞—Ö –∏ —Å—É–º–º–µ –¥–ª—è –ª–µ—á–µ–Ω–∏—èüíâ' \
              '\n4. –û–ø–∏—à–∏—Ç–µ —á–µ–ª–æ–≤–µ–∫–∞,  –∫–æ—Ç–æ—Ä—ã–π –±—ã –º–æ–≥ –≤–∑—è—Ç—å –ø–∏—Ç–æ–º—Ü–∞ –≤ —Å–≤–æ–π –¥–æ–ºüè°' \
              '\n\n!!!–ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Ö–≤–æ—Å—Ç–∞—Ç–æ–≥–æüì∏'


# —Å–æ–∑–¥–∞–¥–∏–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ–±—â–µ–Ω–∏—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
@bot.message_handler(commands=['start'])
def start(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    hello_button = types.KeyboardButton('üëã –ü—Ä–∏–≤–µ—Ç!')
    markup.add(hello_button)
    bot.send_message(message.chat.id, '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!üòä', reply_markup=markup)
    chose_role(message)


@bot.message_handler(content_types=['text'])
def chose_role(message):
    if message.chat.type == 'private':
        # –≤—ã–±–∏—Ä–∞–µ–º —Ä–æ–ª—å
        if message.text == 'üëã –ü—Ä–∏–≤–µ—Ç!' or message.text == '–í—ã–±–æ—Ä —Ä–æ–ª–∏':
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
            shelter_button = types.KeyboardButton('–Ø –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—å –ø—Ä–∏—é—Ç–∞\n–¥–ª—è –∂–∏–≤–æ—Ç–Ω—ã—Ö ‚úÖ')
            user_button = types.KeyboardButton('–Ø –æ–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å\n–•–æ—á—É –ø–æ–º–æ—á—å —Ö–≤–æ—Å—Ç–∞—Ç—ã–º ‚ù§Ô∏è')
            markup.add(shelter_button, user_button)
            bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ—é —Ä–æ–ª—å –≤ –±–æ—Ç–µ ‚¨áÔ∏è', reply_markup=markup)

        elif message.text == '–Ø –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—å –ø—Ä–∏—é—Ç–∞\n–¥–ª—è –∂–∏–≤–æ—Ç–Ω—ã—Ö ‚úÖ':
            what_name(message)

        elif message.text == '–Ø –æ–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å\n–•–æ—á—É –ø–æ–º–æ—á—å —Ö–≤–æ—Å—Ç–∞—Ç—ã–º ‚ù§Ô∏è':
            chose_town(message)


# -----------------------------------–û–±—â–µ–Ω–∏–µ —Å –ø—Ä–∏—é—Ç–æ–º------------------------------------------------
shelter = []


# –û–ë–†–ê–ë–û–¢–ö–ê –î–ê–ù–ù–´–• –ü–†–ò–Æ–¢–ê
# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–µ–Ω–∏ –ø—Ä–∏—é—Ç–∞
@bot.message_handler(content_types=['text'])
def what_name(message):
    name_shelter = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏—é—Ç–∞:Ô∏è')
    bot.register_next_step_handler(name_shelter, check_name)


@bot.message_handler(content_types=['text'])
def check_name(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
    add_button = types.KeyboardButton('–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ‚úî')
    return_button = types.KeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µÔ∏èüîÅ')
    markup.add(add_button, return_button)
    msg = bot.send_message(message.chat.id, '–í—ã –≤–≤–µ–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏—é—Ç–∞.\n–•–æ—Ç–∏—Ç–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –µ–≥–æ?', reply_markup=markup)
    shelter.append(message.text)
    bot.register_next_step_handler(msg, add_town)


# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ—Ä–æ–¥–∞
@bot.message_handler(content_types=['text'])
def add_town(message):
    if message.chat.type == 'private':
        if message.text == '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ‚úî' or message.text == '–ò–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥Ô∏èüîÅ':
            markup_towns_shelter = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
            moscow_button_sh = types.InlineKeyboardButton(text='–ú–æ—Å–∫–≤–∞', callback_data='moscow')
            piter_button_sh = types.InlineKeyboardButton(text='–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥', callback_data='spb')
            krasnodar_button_sh = types.InlineKeyboardButton(text='–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä', callback_data='krd')
            sochi_button_sh = types.InlineKeyboardButton(text='–°–æ—á–∏', callback_data='sochi')
            markup_towns_shelter.add(moscow_button_sh, piter_button_sh, krasnodar_button_sh, sochi_button_sh)

            inf_town = bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥, –≤ –∫–æ—Ç–æ—Ä–æ–º  –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø—Ä–∏—é—Ç:Ô∏è',
                                        reply_markup=markup_towns_shelter)
            bot.register_next_step_handler(inf_town, reg_town)

        elif message.text == '–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µÔ∏èüîÅ':
            shelter.pop(-1)
            what_name(message)


@bot.message_handler(content_types=['text'])
def reg_town(answer):
    if answer.text == '–ú–æ—Å–∫–≤–∞':
        shelter.append('1')
    elif answer.text == '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥':
        shelter.append('2')
    elif answer.text == '–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä':
        shelter.append('3')
    elif answer.text == '–°–æ—á–∏':
        shelter.append('4')

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
    add_button = types.KeyboardButton('–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≥–æ—Ä–æ–¥‚úîÔ∏è')
    return_button = types.KeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥Ô∏èüîÅ')
    markup.add(add_button, return_button)
    msg = bot.send_message(answer.chat.id, '–í—ã –≤—ã–±—Ä–∞–ª–∏ –≥–æ—Ä–æ–¥.\n–•–æ—Ç–∏—Ç–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –µ–≥–æ?', reply_markup=markup)
    bot.register_next_step_handler(msg, write_inf)


# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∏—é—Ç–µ
@bot.message_handler(content_types=['text'])
def write_inf(message):
    if message.chat.type == 'private':
        if message.text == '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≥–æ—Ä–æ–¥‚úîÔ∏è' or message.text == '–ò–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—éÔ∏èüîÅ':
            inf_shelter = bot.send_message(message.chat.id,
                                           '–í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞—à–µ–º –ø—Ä–∏—é—Ç–µ (–Ω–µ –∑–∞–±—É–¥—å—Ç–µ —É–∫–∞–∑–∞—Ç—å –∞–¥—Ä–µ—Å).')
            bot.register_next_step_handler(inf_shelter, reg_inf)
        elif message.text == '–ò–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥Ô∏èüîÅ':
            shelter.pop(-1)
            add_town(message)


def reg_inf(message):
    shelter.append(message)
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
    add_button = types.KeyboardButton('–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é‚úî')
    return_button = types.KeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—éÔ∏èüîÅ')
    markup.add(add_button, return_button)
    msg = bot.send_message(message.chat.id, '–í—ã –≤–≤–µ–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∏—é—Ç–µ.\n–•–æ—Ç–∏—Ç–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –µ—ë?', reply_markup=markup)
    shelter.append(message.text)
    bot.register_next_step_handler(msg, what_number)


# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —à–µ–ª—Ç–µ—Ä–∞
@bot.message_handler(content_types=['text'])
def what_number(message):
    if message.chat.type == 'private':
        if message.text == '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é‚úî' or \
                message.text == '–°–µ–π—á–∞—Å –∏—Å–ø—Ä–∞–≤–ª—é' \
                or message.text == '–ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–ΩüîÅ':
            numb_shelter = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.')
            bot.register_next_step_handler(numb_shelter, check_phone)
        elif message.text == '–ò–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—éÔ∏èüîÅ':
            shelter.pop(-1)
            write_inf(message)


def check_phone(message):
    if re.match(r'^(\+7|7|8)?[\s\-]?\(?[489][0-9]{2}\)?[\s\-]?[0-9]{3}[\s\-]?[0-9]{2}[\s\-]?[0-9]{2}$', message.text):
        # message.connection.cursor.execute("INSERT INTO `givemepaw`.`shelters` (`phone`) VALUES (?)", (message,))
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
        add_button = types.KeyboardButton('–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω‚úî')
        return_button = types.KeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–ΩüîÅ')
        markup.add(add_button, return_button)
        msg_ = bot.send_message(message.chat.id, '–í—ã –≤–≤–µ–ª–∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø—Ä–∏—é—Ç–∞.\n–•–æ—Ç–∏—Ç–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –µ–≥–æ?',
                                reply_markup=markup)
        shelter.append(message.text)
        bot.register_next_step_handler(msg_, step_for_anketa)
        print(shelter)
    else:
        shelter.pop(-1)
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
        error_button = types.KeyboardButton('–°–µ–π—á–∞—Å –∏—Å–ø—Ä–∞–≤–ª—é')
        markup.add(error_button)
        error = bot.send_message(message.chat.id, '–ù–æ–º–µ—Ä –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã!', reply_markup=markup)
        bot.register_next_step_handler(error, what_number)


# –∑–∞–≥—Ä—É–∂–∞–µ–º —à–µ–ª—Ç–µ—Ä–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
# def insert_shelter():
#     print(shelter)
#     sql = "INSERT INTO `givemepaw`.`shelters` (`shelter_name`, `id_city`, `desc_shelter`, `phone`)
#     VALUES (%s, %s, %s, %s)"
#     cursor = db_mysql.
#     cursor.executemany(sql, shelter)
#     connection.commit()


# –ê–ù–ö–ï–¢–ê –ñ–ò–í–û–¢–ù–û–ì–û
animal = []


@bot.message_handler(content_types=['text'])
def step_for_anketa(message):
    if message.chat.type == 'private':
        if message.text == '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω‚úî' or message.text == '–î–æ–±–∞–≤–∏—Ç—å –µ—â—ë –∞–Ω–∫–µ—Ç—É':
            markup_anketa_shelter = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
            yes_button_sh = types.InlineKeyboardButton(text='–î–∞!')
            no_button_sh = types.InlineKeyboardButton(text='–ù–µ—Ç')
            markup_anketa_shelter.add(yes_button_sh, no_button_sh)

            chose_anketa = bot.send_message(message.chat.id, '–í—ã –≥–æ—Ç–æ–≤—ã –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É –∂–∏–≤–æ—Ç–Ω–æ–≥–æ?',
                                            reply_markup=markup_anketa_shelter)
            bot.register_next_step_handler(chose_anketa, what_view)

        elif message.text == '–ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–ΩüîÅ':
            what_number(message)


# –°–ø—Ä–∞—à–∏–≤–∞–µ–º –≤–∏–¥ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ
@bot.message_handler(content_types=['text'])
def what_view(message):
    if message.chat.type == 'private':
        if message.text == '–î–∞!' or '–ò–∑–º–µ–Ω–∏—Ç—å –≤–∏–¥Ô∏èüîÅ':
            markup_view_shelter = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
            dog_button_sh = types.InlineKeyboardButton(text='–°–æ–±–∞–∫–∞')
            cat_button_sh = types.InlineKeyboardButton(text='–ö–æ—à–∫–∞')
            markup_view_shelter.add(dog_button_sh, cat_button_sh)
            chose_view = bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ:Ô∏è',
                                          reply_markup=markup_view_shelter)
            bot.register_next_step_handler(chose_view, check_view)

        elif message.text == '–ù–µ—Ç':
            bot.stop_polling()


@bot.message_handler(content_types=['text'])
def check_view(message):
    animal.append(message)
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
    add_button = types.KeyboardButton('–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤–∏–¥‚úî')
    return_button = types.KeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å –≤–∏–¥Ô∏èüîÅ')
    markup.add(add_button, return_button)
    msg = bot.send_message(message.chat.id, '–í—ã –≤—ã–±—Ä–∞–ª–∏ –≤–∏–¥ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ.\n–•–æ—Ç–∏—Ç–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –µ–≥–æ?', reply_markup=markup)
    bot.register_next_step_handler(msg, write_name_animal)


# –°–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–ª–∏—á–∫—É
@bot.message_handler(content_types=['text'])
def write_name_animal(message):
    if message.chat.type == 'private':
        if message.text == '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤–∏–¥‚úî' or message.text == '–ò–∑–º–µ–Ω–∏—Ç—å –∫–ª–∏—á–∫—ÉüîÅ':
            add_name_animal = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –∫–ª–∏—á–∫—É.')
            bot.register_next_step_handler(add_name_animal, reg_name_animal)
        elif message.text == '–ò–∑–º–µ–Ω–∏—Ç—å –≤–∏–¥Ô∏èüîÅ':
            what_view(message)


def reg_name_animal(message):
    animal.append(message)
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
    add_button = types.KeyboardButton('–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–ª–∏—á–∫—É‚úî')
    return_button = types.KeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å –∫–ª–∏—á–∫—ÉüîÅ')
    markup.add(add_button, return_button)
    msg = bot.send_message(message.chat.id, '–í—ã –≤–≤–µ–ª–∏ –∫–ª–∏—á–∫—É –∂–∏–≤–æ—Ç–Ω–æ–≥–æ.\n–•–æ—Ç–∏—Ç–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –µ—ë?', reply_markup=markup)
    bot.register_next_step_handler(msg, write_age)


# –°–ø—Ä–∞—à–∏–≤–∞–µ–º –≤–æ–∑—Ä–∞—Å—Ç
@bot.message_handler(content_types=['text'])
def write_age(message):
    if message.chat.type == 'private':
        if message.text == '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–ª–∏—á–∫—É‚úî' or message.text == '–ò–∑–º–µ–Ω–∏—Ç—å –≤–æ–∑—Ä–∞—Å—ÇüîÅ':
            add_name_animal = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç.')
            bot.register_next_step_handler(add_name_animal, reg_age_animal)
        elif message.text == '–ò–∑–º–µ–Ω–∏—Ç—å –∫–ª–∏—á–∫—ÉüîÅ':
            write_name_animal(message)


def reg_age_animal(message):
    animal.append(message)
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
    add_button = types.KeyboardButton('–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤–æ–∑—Ä–∞—Å—Ç‚úî')
    return_button = types.KeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å –≤–æ–∑—Ä–∞—Å—ÇüîÅ')
    markup.add(add_button, return_button)
    msg = bot.send_message(message.chat.id, '–í—ã –≤–≤–µ–ª–∏ –≤–æ–∑—Ä–∞—Å—Ç –∂–∏–≤–æ—Ç–Ω–æ–≥–æ.\n–•–æ—Ç–∏—Ç–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –µ–≥–æ?', reply_markup=markup)
    bot.register_next_step_handler(msg, write_life)


# –°–ø—Ä–∞—à–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∂–∏–∑–Ω–∏
@bot.message_handler(content_types=['text'])
def write_life(message):
    if message.chat.type == 'private':
        if message.text == '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤–æ–∑—Ä–∞—Å—Ç‚úî' or message.text == '–ò–∑–º–µ–Ω–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—éüîÅ':
            add_name_animal = bot.send_message(message.chat.id, '–û–ø–∏—à–∏—Ç–µ –∏—Å—Ç–æ—Ä–∏—é –∂–∏–∑–Ω–∏ —Ö–≤–æ—Å—Ç–∞—Ç–æ–≥–æ.')
            bot.register_next_step_handler(add_name_animal, reg_life_animal)
        elif message.text == '–ò–∑–º–µ–Ω–∏—Ç—å –≤–æ–∑—Ä–∞—Å—ÇüîÅ':
            write_age(message)


def reg_life_animal(message):
    animal.append(message)
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
    add_button = types.KeyboardButton('–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é‚úî')
    return_button = types.KeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—éüîÅ')
    markup.add(add_button, return_button)
    msg = bot.send_message(message.chat.id, '–í—ã –≤–≤–µ–ª–∏ –∏—Å—Ç–æ—Ä–∏—é –∂–∏–∑–Ω–∏ —Ö–≤–æ—Å—Ç–∞—Ç–æ–≥–æ.\n–•–æ—Ç–∏—Ç–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –µ—ë?',
                           reply_markup=markup)
    bot.register_next_step_handler(msg, write_requirements)


# –£–∑–Ω–∞—ë–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –±—É–¥—É—â–∏–º –≤–ª–∞–¥–µ–ª—å—Ü–∞–º
@bot.message_handler(content_types=['text'])
def write_requirements(message):
    if message.chat.type == 'private':
        if message.text == '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é‚úî' or message.text == '–ò–∑–º–µ–Ω–∏—Ç—å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—èüîÅ':
            add_requirements = bot.send_message(message.chat.id, '–£–∫–∞–∂–∏—Ç–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –±—É–¥—É—â–∏–º –≤–ª–∞–¥–µ–ª—å—Ü–∞–º.')
            bot.register_next_step_handler(add_requirements, reg_requirements)
        elif message.text == '–ò–∑–º–µ–Ω–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—éüîÅ':
            write_life(message)


def reg_requirements(message):
    animal.append(message)
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
    add_button = types.KeyboardButton('–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è‚úî')
    return_button = types.KeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—èüîÅ')
    markup.add(add_button, return_button)
    msg = bot.send_message(message.chat.id, '–í—ã —É–∫–∞–∑–∞–ª–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –±—É–¥—É—â–∏–º –≤–ª–∞–¥–µ–ª—å—Ü–∞–º.'
                                            '\n–•–æ—Ç–∏—Ç–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏—Ö?', reply_markup=markup)
    bot.register_next_step_handler(msg, upload_photo)


# –ü—Ä–æ—Å–∏–º –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ
@bot.message_handler(content_types=['text'])
def upload_photo(message):
    if message.chat.type == 'private':
        if message.text == '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è‚úî' or message.text == '–ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æüîÅ':
            add_foto = bot.send_message(message.chat.id, '–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ —Ö–≤–æ—Å—Ç–∞—Ç–æ–≥–æ.')
            bot.register_next_step_handler(add_foto, check_photo)
        elif message.text == '–ò–∑–º–µ–Ω–∏—Ç—å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—èüîÅ':
            write_requirements(message)


def check_photo(message):
    animal.append(message)
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
    add_button = types.KeyboardButton('–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–æ—Ç–æ‚úî')
    return_button = types.KeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æüîÅ')
    markup.add(add_button, return_button)
    msg = bot.send_message(message.chat.id, '–í—ã –∑–∞–≥—Ä—É–∑–∏–ª–∏ —Ñ–æ—Ç–æ —Ö–≤–æ—Å—Ç–∞—Ç–æ–≥–æ.'
                                            '\n–•–æ—Ç–∏—Ç–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –µ–≥–æ?', reply_markup=markup)
    bot.register_next_step_handler(msg, last_step)


# –§–∏–Ω–∏—à–Ω–∞—è –ø—Ä—è–º–∞—è
@bot.message_handler(content_types=['text'])
def last_step(message):
    if message.chat.type == 'private':
        if message.text == '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–æ—Ç–æ‚úî':
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
            role_button = types.KeyboardButton('–í—ã–±–æ—Ä —Ä–æ–ª–∏')
            add_button = types.KeyboardButton('–î–æ–±–∞–≤–∏—Ç—å –µ—â—ë –∞–Ω–∫–µ—Ç—É')
            stop_button = types.KeyboardButton('STOP')
            markup.add(role_button, add_button, stop_button)
            add_finish = bot.send_message(message.chat.id, '–£—Ä–∞!!!\n–í—ã –∑–∞–ø–æ–ª–Ω–∏–ª–∏ –∞–Ω–∫–µ—Ç—É —Ö–≤–æ—Å—Ç–∞—Ç–æ–≥–æ.\n'
                                                           '–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ.', reply_markup=markup)
            bot.register_next_step_handler(add_finish, last_step_check)
        elif message.text == '–ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æüîÅ':
            upload_photo(message)


@bot.message_handler(content_types=['text'])
def last_step_check(message):
    if message.chat.type == 'private':
        if message.text == '–í—ã–±–æ—Ä —Ä–æ–ª–∏':
            chose_role(message)
        elif message.text == '–î–æ–±–∞–≤–∏—Ç—å –µ—â—ë –∞–Ω–∫–µ—Ç—É':
            step_for_anketa(message)
        elif message.text == 'STOP':
            bot.stop_polling(message)


# -----------------------------------–û–±—â–µ–Ω–∏–µ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º------------------------------------------------
# –°–ø—Ä–∞—à–∏–≤–∞–µ–º –≥–æ—Ä–æ–¥
@bot.message_handler(content_types=['text'])
def chose_town(message):
    markup_towns_user = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    moscow_button_usr = types.InlineKeyboardButton(text='–ú–æ—Å–∫–≤–∞üêæ', callback_data='1')
    piter_button_usr = types.InlineKeyboardButton(text='–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥üêæ', callback_data='2')
    krasnodar_button_usr = types.InlineKeyboardButton(text='–ö—Ä–∞—Å–Ω–æ–¥–∞—Äüêæ', callback_data='3')
    sochi_button_usr = types.InlineKeyboardButton(text='–°–æ—á–∏üêæ', callback_data='4')
    markup_towns_user.add(moscow_button_usr, piter_button_usr, krasnodar_button_usr, sochi_button_usr)

    inf_town = bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥, –≤ –∫–æ—Ç–æ—Ä–æ–º  –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø—Ä–∏—é—Ç:Ô∏è',
                                reply_markup=markup_towns_user)
    bot.register_next_step_handler(inf_town, show_type)


# –°–ø—Ä–∞—à–∏–≤–∞–µ–º –≤–∏–¥ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ
@bot.message_handler(content_types=['text'])
def show_type(message):
    markup_view_shelter = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    dog_button_sh = types.InlineKeyboardButton(text='–°–æ–±–∞–∫–∞')
    cat_button_sh = types.InlineKeyboardButton(text='–ö–æ—à–∫–∞')
    markup_view_shelter.add(dog_button_sh, cat_button_sh)

    if message.chat.type == 'private':
        if message.text == '–ú–æ—Å–∫–≤–∞üêæ':
            chose_view = bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ:Ô∏è',
                                          reply_markup=markup_view_shelter)
            bot.register_next_step_handler(chose_view, content_moscow)

        elif message.text == '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥üêæ':
            chose_view = bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ:Ô∏è',
                                          reply_markup=markup_view_shelter)
            bot.register_next_step_handler(chose_view, content_spb)

        elif message.text == '–ö—Ä–∞—Å–Ω–æ–¥–∞—Äüêæ':
            chose_view = bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ:Ô∏è',
                                          reply_markup=markup_view_shelter)
            bot.register_next_step_handler(chose_view, content_krasnodar)

        elif message.text == '–°–æ—á–∏üêæ':
            chose_view = bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ:Ô∏è',
                                          reply_markup=markup_view_shelter)
            bot.register_next_step_handler(chose_view, content_sochi)


@bot.message_handler(content_types=['text'])
def content_moscow(message):
    flag_city = '1'
    if message.chat.type == 'private':
        if message.text == '–°–æ–±–∞–∫–∞':
            flag_type = '1'
        elif message.text == '–ö–æ—à–∫–∞':
            flag_type = '2'

    select = "SELECT name_animals, age_animals, animals.desc, animals.family " \
             "FROM givemepaw.animals JOIN type_animals on animals.id_type = type_animals.id_type" \
             " JOIN shelters on  shelters.id_shelter = animals.id_shelter" \
             " JOIN city on  city.id_city = shelters.id_city WHERE city.id_city = %s"
    with connection.cursor() as cursor:
        cursor.executemany(select, flag_city)
        result = cursor.fetchall()
        for row in result:
            name = row.get('name_animals')
            age = row.get('age_animals')
            desc = row.get('desc')
            family = row.get('family')
            f = [name, age, desc, family]
            anketa = ''
            space = '\n'
            for i in range(len(f)):
                anketa += f[i] + space
            bot.send_message(message.chat.id, anketa)


@bot.message_handler(content_types=['text'])
def content_spb(message):
    flag_city = '2'
    if message.chat.type == 'private':
        if message.text == '–°–æ–±–∞–∫–∞':
            flag_type = '1'
        elif message.text == '–ö–æ—à–∫–∞':
            flag_type = '2'
    select = ''


@bot.message_handler(content_types=['text'])
def content_krasnodar(message):
    flag_city = '3'
    if message.chat.type == 'private':
        if message.text == '–°–æ–±–∞–∫–∞':
            flag_type = '1'
        elif message.text == '–ö–æ—à–∫–∞':
            flag_type = '2'
    select = ''


@bot.message_handler(content_types=['text'])
def content_sochi(message):
    flag_city = '4'
    if message.chat.type == 'private':
        if message.text == '–°–æ–±–∞–∫–∞':
            flag_type = '1'
        elif message.text == '–ö–æ—à–∫–∞':
            flag_type = '2'
    select = ''


bot.polling(none_stop=True, interval=0)
